---
import {PropertiesService} from "@services/properties.service";
import {getProductColors} from "@helpers/product";
import Layout from "@layouts/Layout.astro";
import {ProductsService} from "@services/products.service";
import {IProductModel} from "@models/products.model";
import {moneyFormat} from "@helpers/money-format";
import AddToCartButton from '@components/add-to-cart-button.component.svelte';
import ColorSelector from "@components/product/color-selector.svelte";
import ProductDetails from "@components/product/product-details.svelte";
import QuantitySelector from "@components/product/quantity-selector.svelte";
import {cloudinarySrcSet} from "../../../helpers/cloudinary.helper";
import {config} from "@data/config";
import Breadcrumbs from "@partials/breadcrumbs.astro";
import Spinner from '@components/loading-spiner.svelte';
import Schema from '@components/product-schema.svelte';

interface IProductPageProps {
    item: IProductModel;
}

export async function getStaticPaths() {
    const allProducts = await (new ProductsService).load() as IProductModel[];
    const all = [];

    for (let i = 0; allProducts.length > i; i++) {
        all.push({
            params: {
                slug: allProducts[i].slug,
                sku: allProducts[i].sku,
            },
            props: {
                item: allProducts[i],
            }
        })
    }

    return all;
}


const {item} = Astro.props as IProductPageProps;
const propertiesService = new PropertiesService();
const allColors = await propertiesService.getPropertyValues({slug: 'color'});
const allMaterials = await propertiesService.getPropertyValues({slug: 'material'});
const id = Math.random();

const colors = getProductColors(allColors, item.variants.filter(variant => variant.color || variant.image));
const categories = await (new ProductsService).categories(true);
function slimDownProduct(item) {
    return {
        id: item.id,
        title: item.title,
    }
}

const srcSet = cloudinarySrcSet(item.thumb || config.defaultNoImage);
const breadCrumbs = [...[{title: 'Products', slug: 'all'}], ...item.categories.reverse()];
const seo = {
    title: `${breadCrumbs.map(i => i.title).join(' - ')} - ${item.title}`,
    description: item.description,
}

---
<Layout seo={seo}>
    <Breadcrumbs items={breadCrumbs}
                 current={item.title}
                 slug={`products`} />
    <main class="mx-auto max-w-7xl sm:px-6 sm:pt-16 lg:px-8">
        <div class="mx-auto max-w-2xl lg:max-w-none">
            <!-- Product -->
            <div class="lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8">
                <!-- Image gallery -->
                <div class="flex flex-col-reverse">

                    <div class="aspect-h-1 aspect-w-1 w-full relative" id="main">
                        <div class="hidden absolute bg-black/70 h-full w-full z-50 loading-mask">
                            <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                                <Spinner w={24} h={24} />
                            </div>
                        </div>
                        {srcSet && (
                        <picture class="product-image">
                            <source media="(max-width: 767px)"
                                    srcset={`${srcSet.copies[0].url}  768w`}
                                    sizes={`(max-width: 767px) 100vw`}>

                            <source srcset={`${srcSet.copies[1].url} 1700w`}>
                            <img src={srcSet.original} class="h-full w-full object-cover object-center sm:rounded-lg transition duration-200 lg:hover:scale-110"
                                 alt={item.title}></picture>
                        )}
                    </div>
                </div>

                <!-- Product info -->
                <div class="mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0">
                    <h1 class="text-3xl font-bold tracking-tight text-gray-900">{item.title}</h1>

                    <div class="mt-3">
                        <h2 class="sr-only">Product information</h2>
                        {item.price && item.price !== -1 && (
                        <p class="text-3xl tracking-tight text-gray-900">{moneyFormat(item.price)}
                        <span class="text-base text-gray-500">+ VAT</span>
                        </p>
                        )}
                        {!item.price || item.price === -1 && (
                                <p class="text-3xl tracking-tight text-gray-900">Contact us</p>
                        )}


                            {item.sku && (
                                    <p class="text-base text-gray-500">
                           Item Code: {item.sku}
                                    </p>
                            )}

                    </div>
                    {item.tags && item.tags.length > 0 && (

                    <div class="mt-3">
                        <p class="text-base text-gray-500 inline-flex gap-2">
                            <svg class="h-6 w-6"
                                    xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 16 16"><g fill="currentColor"><path d="M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z"/><path d="M5.5 5a.5.5 0 1 1 0-1a.5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3a1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z"/></g></svg>
                            {item.tags.map(tag => (
                                <a href={`/products/all?tags[]=${tag.slug}`} title=`All products tagged ${tag.name}`
                                   class="text-base text-gray-500 hover:text-gray-900 hover:underline">{tag.name}</a>
                            ))}
                        </p>
                    </div>
                    )}
                    <div class="mt-6">
                        <h3 class="sr-only">Description</h3>

                        <div class="space-y-6 text-base text-gray-700">
                            <p set:html={item.description}></p>
                        </div>
                    </div>

                    <form class="mt-6">
                        <!-- Colors -->
                        <div>

                            <fieldset class="mt-2">
                                <ColorSelector colors={colors} client:idle targetImage={`#main`} withLabels={true}
                                               mode="picture"  />
                                <legend class="sr-only">Choose a color</legend>

                            </fieldset>
                        </div>
                        <div class="mt-10 flex">
                        <QuantitySelector client:idle />
                        </div>
                        <div class="mt-10 flex">
                            {item.price && item.price !== -1 && (
                            <AddToCartButton item={slimDownProduct(item)} client:idle>Add to Quote</AddToCartButton>
                            )}
                            {!item.price || item.price === -1 && (
                                    <div>Request price</div>
                            )}
                        </div>
                    </form>

                    <section aria-labelledby="details-heading" class="mt-12">
                        <h2 id="details-heading" class="sr-only">Additional details</h2>

                        <div class="divide-y divide-gray-200 border-t">
                            <div>
                                <h3>
                                    <button type="button" class="group relative flex w-full items-center justify-between py-6 text-left">
                                        <span class="text-sm font-medium text-indigo-600">Details</span>
                                    </button>
                                </h3>
                                <div class="prose prose-sm pb-6" id="details" >
                                    <ProductDetails item={item} />

                                </div>
                            </div>

                        </div>
                    </section>
                </div>
            </div>

        </div>
    </main>

<Schema product={item} />
</Layout>
