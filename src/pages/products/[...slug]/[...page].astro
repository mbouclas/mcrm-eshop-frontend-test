---
import {PropertiesService} from "@services/properties.service";
import {ProductsService} from "@services/products.service";
import {arrayPaginator} from "@helpers/paginate-array";
import Layout from "@layouts/Layout.astro";
import ProductGrid from '@partials/product-grid.astro';
import Breadcrumbs from "@partials/breadcrumbs.astro";
import CategoriesList from '@components/search/filters/categories.filter.svelte';
import ColorsList from "@components/search/filters/colors.filter.svelte";
import MaterialsList from "@components/search/filters/materials.filter.svelte";
import PriceRange from "@components/search/filters/price-range.filter.svelte";
import TotalResultCounter from "@components/search/total-results.svelte";
import Pagination from "@components/search/pagination.svelte";
import MainSearch from '@components/search/main.svelte';
export async function getStaticPaths() {
    const allProducts = await (new ProductsService).load();
    const categories = await (new ProductsService).categories(true);
    const per_page = 12;

    const all = [];

    for (let i = 0; categories.length > i; i++) {
        // const products = (new ProductsService).filterProductsByCategory({slug: categories[i].slug}, allProducts);
        const products = await (new ProductsService).getCategoryProductsWithAggregations(categories[i].slug);

        const firstPage = arrayPaginator(products.data, 1, per_page);
        for (let idx = 0; idx < firstPage.totalPages; idx++) {
            all.push({
                params: {
                    page: idx === 0 ? undefined : (idx + 1).toString(),
                    slug: categories[i].slug,
                },
                props: {
                    paginated: arrayPaginator(products.data, idx + 1, per_page),
                    category: categories[i],
                    latest: products.data.slice(0, 4),
                    aggregations: products.aggregations,
                    categories: [categories[i]],
                }
            });
        }
    }

    // now push a version without any set category, so /products

    const firstPage = arrayPaginator(allProducts, 1);
    for (let idx = 0; idx < firstPage.totalPages; idx++) {
        all.push({
            params: {
                page: idx === 0 ? undefined : (idx + 1).toString(),
                slug: 'all',
            },
            props: {
                paginated: arrayPaginator(allProducts, idx + 1, per_page),
                latest: allProducts.slice(0, 4),
                aggregations: await (new ProductsService).loadAllAggregations(),
                categories: await (new ProductsService).categories(),
                category: {
                    title: 'All Products',
                    slug: 'all',
                    parents: [],
                }
            }
        });
    }

    return all;
}

const {page = 1, slug} = Astro.params;
const { paginated, latest, category, aggregations, categories } = Astro.props;


const products = paginated.data;
if (category && !category.parents) {
    category.parents = [];
}

const appliedFilters = [{category}]
const propertiesService = new PropertiesService();
const allColors = await propertiesService.getPropertyValues({slug: 'color'});
const allMaterials = await propertiesService.getPropertyValues({slug: 'material'});

---
<Layout title="Products">


<Breadcrumbs items={[...[{title: 'All Products', slug: 'all'}], ...category?.parents]}
             current={category.slug !== 'all' ? category.title : ''}
             slug={`products`} />

    <div class="text-center">
        <h1 class="text-4xl font-bold tracking-tight text-accent">{category && category.title || 'All Products'}</h1>

        <p class="mx-auto mt-4 max-w-3xl text-base text-gray-500">
            <TotalResultCounter count={paginated.total} suffix="Products" client:idle />
        </p>
    </div>
    <main class="mx-auto max-w-2xl px-4 lg:max-w-none lg:px-8">
<div class="pb-24 pt-12 lg:grid lg:grid-cols-3 lg:gap-x-8 xl:grid-cols-4">
    <aside>
        <h2 class="sr-only">Filters</h2>
        <div class="flex items-center flex-wrap mt-16">
            <div class="search">
                <input
                        type="search"
                        class="w-full px-3 hidden lg:block py-3 rounded-3xl border border-gray-400"
                        placeholder="Search within this Category"
                />

            <span>
              <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 transform rotate-90"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      stroke-width="2"
              >
                <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
                ></path>
              </svg>
            </span>
                    <span>Filters</span>
                </button>
            </div>
            <div class="search w-1/2 lg:w-1/3 lg:hidden">
                <button
                        type="search"
                        class="w-10/12 px-3 py-3 rounded-3xl border border-gray-400 flex gap-3 justify-center"
                >
            <span>
              <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      stroke-width="2"
              >
                <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </span>
                    <span>Search</span>
                </button>
            </div>

        </div>
        <button type="button" x-description="Mobile filter dialog toggle, controls the 'mobileFilterDialogOpen' state." class="inline-flex items-center lg:hidden" @click="open = true">
            <span class="text-sm font-medium text-gray-700">Filters</span>
            <svg class="ml-1 h-5 w-5 flex-shrink-0 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path>
            </svg>
        </button>

        <div class="hidden lg:block">
            <form class="space-y-10 divide-y divide-gray-200">
                <div class="py-6">
                    <CategoriesList categories={categories} category={category} client:idle agg={aggregations.find(a => a.key === 'categories')} />
                </div>
                <div class="py-6">
                    <PriceRange client:idle  />
                </div>
                <div class="py-6">
                    <ColorsList client:idle  />
                </div>
                <div class="py-6">
                <MaterialsList client:idle  />
                </div>

            </form>
        </div>{/* End of desktop */}
    </aside>{/* End of sidebar */}
    <section class="mt-6 lg:col-span-2 lg:mt-0 xl:col-span-3">
            <MainSearch appliedFilters={appliedFilters} colors={allColors} materials={allMaterials}
                        client:idle>
                <ProductGrid products={products} />
            </MainSearch>


    </section>{/* End of products area */}
</div>{/* End of products grid */}
    </main>
    <Pagination
            totalPages={paginated.totalPages}
            baseURL={`/products/${category.slug}`}
            currentPage={paginated.currentPage}
            client:idle
    />

</Layout>
