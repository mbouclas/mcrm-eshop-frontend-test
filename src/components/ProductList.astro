---
import { ProductsService } from '@services/products.service';
import { moneyFormat } from '@helpers/money-format';
import AddToCartButton from '@partials/add-to-cart-button.astro';
import {PropertiesService} from '@services/properties.service';

const propertiesService = new PropertiesService();
const all = await (new ProductsService).load();
const products = all.filter(item => item.variants)
.map(item => item)
.filter(item => item.variants.find(i => i.color))
const colors = await propertiesService.getPropertyValues({slug: 'color'});


function getProductColors(propertyValues) {
    const colors = [];
    propertyValues.forEach(value => {
        if (!value.color) {return}

        colors.push(value.color);
    });

    return colors
}

function findColor(code) {
    return propertiesService.findValue(colors,{code})
}
---


 <div class="flex-1 pl-4">
        <div class="w-full grid grid-cols-1 gap-4 lg:grid-cols-4">
          <!-- START ITEM -->
          {products.map(item => (
          <div class="flex items-center flex-col justify-between">
            <a href={`/product/${item.sku}/${item.slug}`}>
              <img
               src={item.thumb} alt={item.title}
               alt={item.title}
               title={item.title}
               width="158"
               height="158"
              />
            </a>
            <div class="flex w-full">
              <div class="flex-1">
                <div class="w-full grid grid-cols-5 px-3">
                    {getProductColors(item.propertyValue).map(color => (

                            <div class={`h-6 w-6 border border-[${color}] flex rounded-full items-center justify-center`}
                            style={`border-color:${color}`}>
                                <div class={`h-3 w-3 rounded-full`} style={`background-color:${color}`}></div>
                            </div>
                    ))}


                </div>
              </div>
              <div class="flex items-center">
                <p></p>
                <span class="ml-[1px] text-xl">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    stroke-width="2"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19 9l-7 7-7-7"></path>
                  </svg>
                </span>
              </div>
            </div>

            <div class="w-full">
              <h4 class="text-lg mt-2 font-bold text-black">
                 {item.title}
              </h4>
              <p class="text-sm text-gray-500 mt-2">{item.description}</p>

            </div>
               <div class="flex flex-1 flex-col w-full">
                        {item.variants && item.variants.length > 0 && (
                      <p class="text-sm italic text-gray-500">{getProductColors(item.propertyValue).length} colors</p>
                      <select>
                        {item.variants.map(variant => (
                            <option>{variant.variantId} - {findColor(variant.color)?.name}</option>
                        ))}
                        </select>
                      )}
                      <p class="text-base font-medium text-gray-900">{moneyFormat(item.price)}</p>
                      <AddToCartButton item={item}></AddToCartButton>
                         <div
              class="w-full text-lg text-gray-500 flex items-center mt-1"
            >

            </div>

            <div class="w-full text-blue-500 py-2.5">
              No minimum quantity
            </div>

                    </div>
                  </div>


          ))}

          <!-- END ITEM -->
        </div>
      </div>
